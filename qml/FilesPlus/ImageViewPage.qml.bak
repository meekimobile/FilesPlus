import QtQuick 1.1
import com.nokia.symbian 1.1
import FolderSizeItemListModel 1.0
import SystemInfoHelper 1.0
import "Utility.js" as Utility

Page {
    id: imageViewPage
    tools: null

    property string name: "imageViewPage"
    property alias model: imageGrid.model
    property string fileName
    property bool showGrid: true
    property variant supportedFileType: ["JPG", "PNG", "SVG"]

    state: "grid"
    states: [
        State {
            name: "grid"
            when: showGrid
            PropertyChanges { target: imageGrid; visible: true }
            PropertyChanges { target: imageFlick; visible: false }
            PropertyChanges { target: imageFlickView; source: "" }
        },
        State {
            name: "flick"
            when: !showGrid
            PropertyChanges { target: imageGrid; visible: false }
            PropertyChanges { target: imageFlick; visible: true }
        }
    ]

    ToolBar {
        id: toolBar
        anchors.bottom: parent.bottom
        opacity: 0.5
        z: 2
        visible: false
        tools: ToolBarLayout {
            ToolButton {
                id: backButton
                iconSource: "toolbar-back"

                onClicked: {
                    var p = pageStack.find(function (page) { return page.name == "folderPage"; });
                    if (p) p.refreshSlot();
                    pageStack.pop();
                }
            }

            ToolButton {
                id: openButton
                iconSource: "photos.svg"
                onClicked: {
                    Qt.openUrlExternally(helper.getUrl(imageGrid.getViewFilePath()));
                }
            }

            ToolButton {
                id: printButton
                iconSource: "print.svg"

                onClicked: {
                    var p = pageStack.find(function (page) { return page.name == "folderPage"; });
                    if (p) p.printFileSlot(imageGrid.getViewFilePath(), -1);
                }
            }
        }
    }

    Component.onCompleted: {
        console.debug("imageViewPage onCompleted imageGrid.currentIndex " + imageGrid.currentIndex);
    }

    onFileNameChanged: {
        console.debug("imageViewPage onFileNameChanged fileName " + fileName);
    }

    SystemInfoHelper {
        id: helper
    }

    Rectangle {
        id: imageLabel
        anchors.top: parent.top
        width: parent.width
        height: 40
        z: 2
        color: "black"
        opacity: 0.5
        visible: false

        Text {
            id: imageLabelText
            anchors.horizontalCenter: parent.horizontalCenter
            anchors.verticalCenter: parent.verticalCenter
            color: "white"
        }
    }

    Timer {
        id: clickDelayTimer
        interval: 300
        running: false
        onTriggered: {
            imageLabel.visible = !imageLabel.visible;
        }
    }

    GridView {
        id: imageGrid
        anchors.fill: parent
        cellWidth: parent.width
        cellHeight: parent.height
        contentHeight: parent.height
        cacheBuffer: parent.width * 3
        flow: GridView.TopToBottom
        snapMode: GridView.SnapOneRow
        delegate: imageViewDelegate
        pressDelay: 500

        property int viewIndex: getViewIndex()
        property int selectedIndex: -1

        function getViewIndex() {
            var cx = contentX + parent.width / 2;
            var cy = contentY + parent.height / 2;
            return indexAt(cx, cy);
        }

        function getViewFilePath() {
            var i = imageGrid.getViewIndex();
            if (i > -1) {
                return imageGrid.model.getProperty(i, FolderSizeItemListModel.AbsolutePathRole);
            }
            return "";
        }

        function getImageModelIndex(fileName) {
            for (var i=0; i<imageGrid.model.count; i++) {
                var name = imageGrid.model.getProperty(i, FolderSizeItemListModel.NameRole);
                if (name == fileName) {
                    console.debug("getImageModelIndex " + i + " name " + name)
                    return i;
                }
            }
//            console.debug("getImageModelIndex model.count " + model.count);
//            console.debug("getImageModelIndex found index " + i);
            return -1;
        }

        Component.onCompleted: {
            console.debug("imageGrid onCompleted");
            // Model is not set, positionViewAtIndex() won't work.
        }

        onModelChanged: {
            console.debug("imageGrid onModelChanged count " + model.count + " imageViewPage.fileName " + imageViewPage.fileName);
            // GridView item is not set, positionViewAtIndex() won't work.
            selectedIndex = getImageModelIndex(imageViewPage.fileName);
        }

        onWidthChanged: {
//            console.debug("imageGrid onWidthChanged width " + width);
//            console.debug("imageGrid onWidthChanged cellWidth " + cellWidth);
        }

        onHeightChanged: {
//            console.debug("imageGrid onHeightChanged height " + height);
//            console.debug("imageGrid onHeightChanged cellHeight " + cellHeight);
        }

        onMovementEnded: {
            imageGrid.currentIndex = viewIndex;
//            console.debug("imageGrid onMovementEnded viewIndex " + viewIndex);
//            console.debug("imageGrid onMovementEnded currentIndex " + currentIndex);
//            console.debug("imageGrid onMovementEnded currentItem.width " + currentItem.width + " currentItem.height " + currentItem.height);
//            console.debug("imageGrid onMovementEnded currentItem.sourceSize.width " + currentItem.sourceSize.width + " currentItem.sourceSize.height " + currentItem.sourceSize.height);
            imageLabelText.text = getViewFilePath();
        }

        onFlickEnded: {
            imageGrid.currentIndex = viewIndex;
//            console.debug("imageGrid onFlickEnded viewIndex " + viewIndex);
//            console.debug("imageGrid onFlickEnded currentIndex " + currentIndex);
//            console.debug("imageGrid onFlickEnded currentItem.width " + currentItem.width + " currentItem.height " + currentItem.height);
//            console.debug("imageGrid onFlickEnded currentItem.sourceSize.width " + currentItem.sourceSize.width + " currentItem.sourceSize.height " + currentItem.sourceSize.height);
            imageLabelText.text = getViewFilePath();
        }
    }

    Component {
        id: imageViewDelegate

        Image {
            id: imageView

            property bool isImage: isSupportedImageFormat(fileType)
            property real pinchScaleFactor: 1.0
            property int startX
            property int startY
            property int startWidth
            property int startHeight

            source: getImageSource()
            asynchronous: true
            sourceSize.width: imageGrid.cellWidth
            sourceSize.height: imageGrid.cellHeight
            width: imageGrid.cellWidth
            height: imageGrid.cellHeight
            fillMode: Image.PreserveAspectFit

            function isSupportedImageFormat(fileType) {
                return (supportedFileType.indexOf(fileType.toUpperCase()) != -1);
            }

            function getImageSource() {
                if (imageViewPage.status == PageStatus.Active && isImage) {
                    if (fileType.toUpperCase() == "SVG") {
                        return absolutePath;
                    } else {
                        return "image://local/" + absolutePath;
                    }
                } else {
                    return "";
                }
            }

            BusyIndicator {
                id: imageViewBusy
                width: 80
                height: 80
                anchors.horizontalCenter: parent.horizontalCenter
                anchors.verticalCenter: parent.verticalCenter
                visible: (parent.progress < 1 && parent.status == Image.Loading)
                running: visible
            }

            onStatusChanged: {
                if (status == Image.Null) {
                    console.debug("imageView onStatusChanged index " + index + " status " + status + " absolutePath " + absolutePath);
//                    console.debug("imageView onStatusChanged imageGrid.currentIndex " + imageGrid.currentIndex);
//                    console.debug("imageView onStatusChanged imageGrid.selectedIndex " + imageGrid.selectedIndex);
                    // Issue: Position at index still not work if selected index is not covered by cache.

                    // Set currentIndex to skip image loading to selected image.
                    if (imageGrid.currentIndex != imageGrid.selectedIndex) {
                        imageGrid.currentIndex = imageGrid.selectedIndex;
                        console.debug("imageView onStatusChanged set imageGrid.currentIndex " + imageGrid.currentIndex);
                    }
                }

                if (status == Image.Ready) {
                    console.debug("imageView onStatusChanged index " + index + " status " + status + " absolutePath " + absolutePath);
//                    console.debug("imageView onStatusChanged imageGrid.currentIndex " + imageGrid.currentIndex);
//                    console.debug("imageView onStatusChanged imageGrid.selectedIndex " + imageGrid.selectedIndex);
//                    console.debug("imageView onStatusChanged width " + width + " height " + height);
//                    console.debug("imageView onStatusChanged sourceSize.width " + sourceSize.width + " sourceSize.height " + sourceSize.height);
//                    console.debug("imageView onStatusChanged paintedWidth " + paintedWidth + " paintedHeight " + paintedHeight);

                    if (fileType.toUpperCase() == "SVG") {
                        console.debug("imageView onStatusChanged SVG imageView.paintedWidth " + imageView.paintedWidth + " imageView.paintedHeight " + imageView.paintedHeight);
                        var w = imageView.paintedWidth;
                        var h = imageView.paintedHeight;
                        imageView.sourceSize.width = w;
                        imageView.sourceSize.height = h;
                    }

                    // Position selected image.
                    if (index == imageGrid.currentIndex) {
                        imageGrid.positionViewAtIndex(index, GridView.Contain);
                        imageLabelText.text = absolutePath;
                        console.debug("imageView onStatusChanged positionViewAtIndex index " + index);
                    }

                    // Show toolbar and label.
                    if (!toolBar.visible) {
                        toolBar.visible = true;
                        imageLabel.visible = true;
                    }
                }
            }

            PinchArea {
                anchors.fill: parent
                pinch.dragAxis: Pinch.XandYAxis

                onPinchStarted: {
                    console.debug("imageView onPinchStarted pinch.center " + pinch.center);

                    // Send center, painted size to flick.
                    var left = (imageView.width / 2) - (imageView.paintedWidth / 2);
                    var right = (imageView.width / 2) + (imageView.paintedWidth / 2);
                    var top = (imageView.height / 2) - (imageView.paintedHeight / 2);
                    var bottom = (imageView.height / 2) + (imageView.paintedHeight / 2);

                    imageView.width = imageView.paintedWidth;
                    imageView.height = imageView.paintedHeight;

                    // TODO pinch cell image until finish, then show flick.
                    imageGrid.contentX = (imageView.width - imageGrid.cellWidth) / 2;
                    imageGrid.contentY = (imageView.height - imageGrid.cellHeight) / 2;

                    imageView.startX = imageGrid.contentX;
                    imageView.startY = imageGrid.contentY;
                    imageView.startWidth = imageView.paintedWidth;
                    imageView.startHeight = imageView.paintedHeight;
                    console.debug("imageView onPinchStarted imageGrid.contentX " + imageGrid.contentX + " imageGrid.contentY " + imageGrid.contentY);
                    console.debug("imageView onPinchStarted imageView.startX " + imageView.startX + " imageView.startY " + imageView.startY);
                    console.debug("imageView onPinchStarted imageView.startWidth " + imageView.startWidth + " imageView.startHeight " + imageView.startHeight);

                    imageView.z = 2;
                }
                onPinchUpdated: {
                    console.debug("imageView onPinchUpdated pinch.scale " + pinch.scale);

                    // Image can be shrink to smaller than fit size. it will be enlarged back to fit.
                    // Image can be enlarged to larger than actual size. it will be shrink back to actual.
                    var newWidth = Math.round(imageView.startWidth * pinch.scale * imageView.pinchScaleFactor);
                    var newHeight = Math.round(imageView.startHeight * pinch.scale * imageView.pinchScaleFactor);

                    // Adjust size.
                    if (newWidth < (imageView.startWidth / 2) || newHeight < (imageView.startHeight / 2)) {
                        // Issue: gridW,H should keep original grid size.
                        newWidth = (imageView.startWidth / 2);
                        newHeight = (imageView.startHeight / 2);
                    } else if (newWidth > 1280 || newHeight > 1280) {
                        newWidth = 1280;
                        newHeight = 1280;
                    }
                    imageView.width = newWidth;
                    imageView.height = newHeight;
                    console.debug("imageView onPinchUpdated imageView.width " + imageView.width + " imageView.height " + imageView.height);

                    // Adjust content position.
                    var dx = (imageView.width - imageView.startWidth) / 2
                    var dy = (imageView.height - imageView.startHeight) / 2
                    console.debug("imageView onPinchUpdated dx " + dx + " dy " + dy);

                    imageGrid.contentX = (imageView.startX + dx);
                    imageGrid.contentY = (imageView.startY + dy);
                    console.debug("imageView onPinchUpdated imageGrid.contentX " + imageGrid.contentX + " imageGrid.contentY " + imageGrid.contentY);
//                    console.debug("imageView onPinchUpdated imageGrid.contentWidth " + imageGrid.contentWidth + " imageGrid.contentHeight " + imageGrid.contentHeight);
                }
                onPinchFinished: {
                    console.debug("imageView onPinchFinished imageView.width " + imageView.width + " imageView.height " + imageView.height);
                    console.debug("imageView onPinchFinished imageView.paintedWidth " + imageView.paintedWidth + " imageView.paintedHeight " + imageView.paintedHeight);
                    console.debug("imageView onPinchFinished imageView.sourceSize.width " + imageView.sourceSize.width + " imageView.sourceSize.height " + imageView.sourceSize.height);

                    var newWidth = imageView.width;
                    var newHeight = imageView.height;

                    // Adjust size.
                    if (newWidth < (imageView.startWidth) || newHeight < (imageView.startHeight)) {
                        // Issue: gridW,H should keep original grid size.
                        newWidth = (imageView.startWidth);
                        newHeight = (imageView.startHeight);
                    } else if (newWidth > 1280 || newHeight > 1280) {
                        newWidth = 1280;
                        newHeight = 1280;
                    }
                    imageView.width = newWidth;
                    imageView.height = newHeight;
                    console.debug("imageView onPinchFinished imageView.width " + imageView.width + " imageView.height " + imageView.height);

                    imageView.z = 0;

                    // Send center, painted size to flick.
//                    var left = (imageView.width / 2) - (imageView.paintedWidth / 2);
//                    var right = (imageView.width / 2) + (imageView.paintedWidth / 2);
//                    var top = (imageView.height / 2) - (imageView.paintedHeight / 2);
//                    var bottom = (imageView.height / 2) + (imageView.paintedHeight / 2);
                    imageFlick.mouseX = (imageView.paintedWidth / 2);
                    imageFlick.mouseY = (imageView.paintedHeight / 2);
                    imageFlick.gridPaintedWidth = imageView.startWidth;
                    imageFlick.gridPaintedHeight = imageView.startHeight;
//                    console.debug("imageView onPinchFinished imageFlick.mouseX " + imageFlick.mouseX + " imageFlick.mouseY " + imageFlick.mouseY);
//                    console.debug("imageView onPinchFinished imageFlick.gridMouseX " + imageFlick.gridMouseX + " imageFlick.gridMouseY " + imageFlick.gridMouseY);
//                    console.debug("imageView onPinchFinished imageFlick.gridPaintedWidth " + imageFlick.gridPaintedWidth + " imageFlick.gridPaintedHeight " + imageFlick.gridPaintedHeight);

                    imageFlickView.sourceSize.width = 1280;  // Requested size for LocalFileImageProvider
                    imageFlickView.sourceSize.height = 1280;  // Requested size for LocalFileImageProvider
                    imageFlickView.width = imageView.paintedWidth;
                    imageFlickView.height = imageView.paintedHeight;
                    imageFlickView.source = imageView.getImageSource();

                    imageFlick.visible = true;
                    imageGrid.visible = false;
                    imageView.width = imageGrid.cellWidth;
                    imageView.height = imageGrid.cellHeight;
                    imageGrid.positionViewAtIndex(index, GridView.Contain);

//                    console.debug("imageView onPinchFinished imageGrid.getViewIndex() " + imageGrid.getViewIndex());
//                    console.debug("imageView onPinchFinished imageGrid.viewIndex " + imageGrid.viewIndex);
//                    console.debug("imageView onPinchFinished imageGrid.getViewFilePath() " + imageGrid.getViewFilePath());
//                    console.debug("imageView onPinchFinished imageView.getImageSource() " + imageView.getImageSource());
                }

                MouseArea {
                    anchors.fill: parent

//                    onClicked: {
//                        console.debug("imageView onClicked mouseX " + mouseX + " mouseY " + mouseY)
//                        clickDelayTimer.restart();
//                    }

                    onDoubleClicked: {
                        console.debug("imageView onDoubleClicked mouseX " + mouseX + " mouseY " + mouseY)
                        clickDelayTimer.stop();

                        // Send center, painted size to flick.
                        var left = (imageView.width / 2) - (imageView.paintedWidth / 2);
                        var right = (imageView.width / 2) + (imageView.paintedWidth / 2);
                        var top = (imageView.height / 2) - (imageView.paintedHeight / 2);
                        var bottom = (imageView.height / 2) + (imageView.paintedHeight / 2);

                        // Initialize required parameters for imageFlick.
                        imageFlick.gridMouseX = mouseX - left;
                        imageFlick.gridMouseY = mouseY - top;
                        imageFlick.gridPaintedWidth = imageView.paintedWidth;
                        imageFlick.gridPaintedHeight = imageView.paintedHeight;

                        // Scale to max.
                        imageView.width = 1280;
                        imageView.height = 1280;
                        imageFlickView.sourceSize.width = 1280;  // Requested size for LocalFileImageProvider
                        imageFlickView.sourceSize.height = 1280;  // Requested size for LocalFileImageProvider
                        imageFlickView.width = imageView.paintedWidth;
                        imageFlickView.height = imageView.paintedHeight;
                        imageFlickView.source = imageView.getImageSource();

                        imageFlick.visible = true;
                        imageGrid.visible = false;
                        imageView.width = imageGrid.cellWidth;
                        imageView.height = imageGrid.cellHeight;
                    }
                }
            }
        }
    }

    Flickable {
        id: imageFlick
        width: parent.width
        height: parent.height
        contentWidth: imageFlickView.width
        contentHeight: imageFlickView.height

        property int mouseX
        property int mouseY
        property int gridMouseX
        property int gridMouseY
        property int gridPaintedWidth
        property int gridPaintedHeight

        property real pinchScaleFactor: 1.0
        property int startX
        property int startY
        property int startWidth
        property int startHeight

        onVisibleChanged: {
            if (!visible) {
                mouseX = -1;
                mouseY = -1;
                gridMouseX = -1;
                gridMouseY = -1;
                gridPaintedWidth = -1;
                gridPaintedHeight = -1;
            }
        }

        BusyIndicator {
            id: imageViewBusy
            width: 80
            height: 80
            anchors.horizontalCenter: parent.horizontalCenter
            anchors.verticalCenter: parent.verticalCenter
            visible: (imageFlickView.progress < 1 && imageFlickView.status == Image.Loading)
            running: visible
        }

        Image {
            id: imageFlickView
            fillMode: Image.PreserveAspectFit

            onStatusChanged: {
                if (status == Image.Ready && source != "") {
                    imageFlickView.width = imageFlickView.paintedWidth;
                    imageFlickView.height = imageFlickView.paintedHeight;

                    console.debug("imageFlickView onStatusChanged status " + status + " source " + source);
                    console.debug("imageFlick.mouseX " + imageFlick.mouseX + " imageFlick.mouseY " + imageFlick.mouseY);
                    console.debug("imageFlick.gridMouseX " + imageFlick.gridMouseX + " imageFlick.gridMouseY " + imageFlick.gridMouseY);
                    console.debug("imageFlick.gridPaintedWidth " + imageFlick.gridPaintedWidth + " imageFlick.gridPaintedHeight " + imageFlick.gridPaintedHeight);
                    console.debug("imageFlick.contentWidth " + imageFlick.contentWidth + " imageFlick.contentHeight " + imageFlick.contentHeight);
                    console.debug("imageFlick.width " + imageFlick.width + " imageFlick.height " + imageFlick.height);
                    console.debug("imageFlickView.fillMode " + imageFlickView.fillMode);
                    console.debug("imageFlickView.width " + imageFlickView.width + " imageFlickView.height " + imageFlickView.height);
                    console.debug("imageFlickView.sourceSize.width " + imageFlickView.sourceSize.width + " imageFlickView.sourceSize.height " + imageFlickView.sourceSize.height);
                    console.debug("imageFlickView.paintedWidth " + imageFlickView.paintedWidth + " imageFlickView.paintedHeight " + imageFlickView.paintedHeight);

                    // Set center from dblclick zoom.
                    var actualCenterX;
                    var actualCenterY;
                    if (imageFlick.mouseX != -1 && imageFlick.mouseY != -1) {
                        // Use mouseXY as it opened imageFlickView from pinch.
                        actualCenterX = imageFlick.mouseX;
                        actualCenterY = imageFlick.mouseY;
                    } else {
                        // Calculate actualXY as it opened imageFlickView from dblclick.
                        actualCenterX = imageFlick.gridMouseX * (imageFlick.contentWidth / imageFlick.gridPaintedWidth);
                        actualCenterY = imageFlick.gridMouseY * (imageFlick.contentHeight / imageFlick.gridPaintedHeight);
                    }
                    console.debug("imageFlickView onStatusChanged actualCenterX " + actualCenterX + " actualCenterY " + actualCenterY);
                    imageFlick.contentX = actualCenterX - (imageFlick.width / 2);
                    imageFlick.contentY = actualCenterY - (imageFlick.height / 2);
                    console.debug("imageFlickView onStatusChanged imageFlick.contentX " + imageFlick.contentX + " imageFlick.contentY " + imageFlick.contentY);
                }
            }

            PinchArea {
                id: imagePinchArea
                anchors.fill: parent
                pinch.dragAxis: Pinch.XandYAxis

                onPinchStarted: {
                    console.debug("imagePinchArea onPinchStarted imageFlick.contentX " + imageFlick.contentX + " imageFlick.contentY " + imageFlick.contentY);
                    imageViewPage.state = "flick";
                    imageFlick.startWidth = imageFlickView.width;
                    imageFlick.startHeight = imageFlickView.height;
                    imageFlick.startX = imageFlick.contentX + (imageFlick.width / 2);
                    imageFlick.startY = imageFlick.contentY + (imageFlick.height / 2);
                    console.debug("imagePinchArea onPinchStarted imageFlick.startWidth " + imageFlick.startWidth + " imageFlick.startHeight " + imageFlick.startHeight);
                    console.debug("imagePinchArea onPinchStarted imageFlick.startX " + imageFlick.startX + " imageFlick.startY " + imageFlick.startY);
                }
                onPinchFinished: {
                    console.debug("imagePinchArea onPinchFinished");
                    console.debug("imagePinchArea onPinchFinished imageFlickView.width " + imageFlickView.width + " imageFlickView.height " + imageFlickView.height);
                    console.debug("imagePinchArea onPinchFinished imageFlickView.sourceSize.width " + imageFlickView.sourceSize.width + " imageFlickView.sourceSize.height " + imageFlickView.sourceSize.height);
                    console.debug("imagePinchArea onPinchFinished imageFlickView.paintedWidth " + imageFlickView.paintedWidth + " imageFlickView.paintedHeight " + imageFlickView.paintedHeight);
                    console.debug("imagePinchArea onPinchFinished imageFlick.contentWidth " + imageFlick.contentWidth + " imageFlick.contentHeight " + imageFlick.contentHeight);
                    console.debug("imagePinchArea onPinchFinished imageFlick.gridPaintedWidth " + imageFlick.gridPaintedWidth + " imageFlick.gridPaintedHeight " + imageFlick.gridPaintedHeight);
                    console.debug("imagePinchArea onPinchFinished imageFlick.width " + imageFlick.width + " imageFlick.height " + imageFlick.height);

                    // Adjust size.
                    if (imageFlickView.width < imageFlick.gridPaintedWidth || imageFlickView.height < imageFlick.gridPaintedHeight) {
                        // Issue: gridW,H should keep original grid size.
                        imageFlickView.width = imageFlick.gridPaintedWidth;
                        imageFlickView.height = imageFlick.gridPaintedHeight

                        // Show grid if width or height of image fit to flick view.
                        imageFlickView.source = "";
                        imageFlick.visible = false;
                        imageGrid.visible = true;
                    } else if (imageFlickView.width > imageFlickView.sourceSize.width || imageFlickView.height > imageFlickView.sourceSize.height) {
                        imageFlickView.width = imageFlickView.sourceSize.width;
                        imageFlickView.height = imageFlickView.sourceSize.height;
                    }

//                    imageFlick.contentWidth = imageFlickView.width;
//                    imageFlick.contentHeight = imageFlickView.height;
                    console.debug("imagePinchArea onPinchFinished after imageFlickView.width " + imageFlickView.width + " imageFlickView.height " + imageFlickView.height);
                    console.debug("imagePinchArea onPinchFinished after imageFlick.contentWidth " + imageFlick.contentWidth + " imageFlick.contentHeight " + imageFlick.contentHeight);

//                    if (imageFlickView.width == imageFlick.width || imageFlickView.height == imageFlick.height) {
//                        imageFlickView.source = "";
//                        imageFlick.visible = false;
//                        imageGrid.visible = true;
//                    }

                    // Set center.
//                    var actualCenterX = imageFlick.startX * (imageFlickView.width / imageFlick.startWidth);
//                    var actualCenterY = imageFlick.startY * (imageFlickView.height / imageFlick.startHeight);
//                    console.debug("imagePinchArea onPinchFinished imageFlick.startX " + imageFlick.startX + " imageFlick.startY " + imageFlick.startY);
//                    console.debug("imagePinchArea onPinchFinished actualCenterX " + actualCenterX + " actualCenterY " + actualCenterY);

//                    imageFlick.contentX = actualCenterX - (imageFlick.width / 2);
//                    imageFlick.contentY = actualCenterY - (imageFlick.height / 2);
//                    console.debug("imagePinchArea onPinchFinished imageFlick.contentX " + imageFlick.contentX + " imageFlick.contentY " + imageFlick.contentY);
                }
                onPinchUpdated: {
                    console.debug("imagePinchArea onPinchUpdated pinch.scale " + pinch.scale);

                    // Image can be shrink to smaller than fit size. it will be enlarged back to fit.
                    // Image can be enlarged to larger than actual size. it will be shrink back to actual.
                    var newWidth = Math.round(imageFlick.startWidth * pinch.scale * imageFlick.pinchScaleFactor);
                    var newHeight = Math.round(imageFlick.startHeight * pinch.scale * imageFlick.pinchScaleFactor);
                    imageFlickView.width = newWidth;
                    imageFlickView.height = newHeight;

//                    imageFlick.contentWidth = imageFlickView.width;
//                    imageFlick.contentHeight = imageFlickView.height;
                    console.debug("imagePinchArea onPinchUpdated imageFlickView.width " + imageFlickView.width + " imageFlickView.height " + imageFlickView.height);
                    console.debug("imagePinchArea onPinchUpdated imageFlick.contentWidth " + imageFlick.contentWidth + " imageFlick.contentHeight " + imageFlick.contentHeight);

                    // Adjust content position.
                    var dx = (imageFlickView.width  - imageFlick.startWidth) / 2
                    var dy = (imageFlickView.height - imageFlick.startHeight) / 2
                    imageFlick.contentX = imageFlick.startX + dx;
                    imageFlick.contentY = imageFlick.startY + dy;

//                    // Set center.
//                    var actualCenterX = imageFlick.startX * (imageFlickView.width / imageFlick.startWidth);
//                    var actualCenterY = imageFlick.startY * (imageFlickView.height / imageFlick.startHeight);
//                    console.debug("imagePinchArea onPinchUpdated imageFlick.startX " + imageFlick.startX + " imageFlick.startY " + imageFlick.startY);
//                    console.debug("imagePinchArea onPinchUpdated actualCenterX " + actualCenterX + " actualCenterY " + actualCenterY);

//                    imageFlick.contentX = actualCenterX - (imageFlick.width / 2);
//                    imageFlick.contentY = actualCenterY - (imageFlick.height / 2);
                    console.debug("imagePinchArea onPinchUpdated imageFlick.contentX " + imageFlick.contentX + " imageFlick.contentY " + imageFlick.contentY);
                }

                MouseArea {
                    anchors.fill: parent

//                    onClicked: {
//                        console.debug("imageFlick onClicked");
//                        clickDelayTimer.restart();
//                    }

                    onDoubleClicked: {
                        clickDelayTimer.stop();

                        imageFlickView.source = "";
                        imageFlick.visible = false;
                        imageGrid.visible = true;
                    }
                }
            }
        }
    }
}
